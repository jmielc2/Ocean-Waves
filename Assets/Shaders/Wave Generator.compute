#pragma kernel InitializeSpectrum
#pragma kernel GenerateHeightSpectrum

#define PI 3.14159265358979323846
#define G 9.8

RWTexture2D<float2> spectrum_texture;
RWTexture2D<float> height_texture;
uniform uint u_N;
uniform float u_L;
uniform float2 u_wind_direction;
uniform float u_wind_speed;

// Huga Elias integer hash
float hash(uint n) {
    n = (n << 13U) ^ n;
    n = n * (n * n * 15731U + 0x789221U) + 0x1376312589U;
    return float(n & uint(0x7fffffffU)) / float(0x7fffffff);
}

// Box Muller transform
float2 UniformToGaussianDistribution(float u1, float u2) {
    float R = sqrt(-2.0f * log(u1));
    float theta = 2.0f * PI * u2;
    return float2(R * cos(theta), R * sin(theta));
}

float PhillipsSpectrum(float2 wavevector) {
    const float L = u_wind_speed * u_wind_speed / G;
    const float k = length(wavevector);
    const float inv_k = 1.0f / k;
    const float2 direction = wavevector / k;
    const float inv_k_times_L = 1.0f * inv_k / L;
    const float wind_dot_wavedirection = dot(u_wind_direction, direction);
    return 0.0081f * exp(-1.0f * inv_k_times_L * inv_k_times_L) * inv_k * inv_k * inv_k * inv_k * wind_dot_wavedirection * wind_dot_wavedirection;
}

float ShortWaveSuppressionFactor(float2 wavevector, float threshold, float falloff = 1.0f) {
    const float k = length(wavevector);
    if (k >= threshold) {
        const float diff = (k - threshold) / falloff;
        return exp(-1.0f * diff * diff);
    }
    return 1.0f;
}

/*
* Kernel Functions
*/

[numthreads(8, 8, 1)]
void InitializeSpectrum(uint3 id : SV_DispatchThreadID) {
    const uint seed = id.y * u_N + id.x;
    float scalar = 2.0f * PI / u_L;
    const float threshold = u_N * 0.5f * scalar;
    const float2 wavevector = id.xy * scalar - threshold;
    const float2 gaussians = UniformToGaussianDistribution(hash(seed), hash(seed * 2));
    const float spectrum = PhillipsSpectrum(wavevector) * ShortWaveSuppressionFactor(wavevector, threshold, (sqrt(2.0f) - 1.0f) * threshold);
    // const float spectrum = JonswapSpectrum(wavevector);
    float2 amplitudes = sqrt(0.5f * spectrum) * gaussians;
    
    spectrum_texture[id.xy] = amplitudes;
}

[numthreads(8, 8, 1)]
void GenerateHeightSpectrum(uint3 id : SV_DispatchThreadID) {
    height_texture[id.xy] = 0.5f;
}
