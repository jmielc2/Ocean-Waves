#pragma kernel CSMain

const float PI = 3.14159;
const float F = 100000.0;
const float U = 5.0;

RWStructuredBuffer<float> result;

float Jonswap(float f) {
    const float g = 9.8;
    const float g_recip = 1.0 / g;
    const float pi_recip = 1.0 / PI;
    const float F_recip = 1.0 / F;
    const float f_max = 11.0 * pi_recip * pow(g * g * F_recip / U, 1.0 / 3.0);
    const float f_max_recip = 1 / f_max;
    const float f_recip = 1.0 / f;
    const float f_ratio = f_max / f;
    const float f_diff = f - f_max;
    const float s = (f < f_max) ? 1.0 / 0.07 : 1.0 / 0.09;
    const float a = 0.076 * pow(U * U * F_recip * g_recip, 0.22);
    const float b = (1.0 / 16.0) * pi_recip * pi_recip * pi_recip * pi_recip;

    float result = a * g * g * f_recip * f_recip * f_recip * f_recip * f_recip * b;
    result *= exp((-5 / 4) * f_ratio * f_ratio * f_ratio * f_ratio);
    const float r = exp(-1.0 * f_diff * f_diff * 0.5 * s * s * f_max_recip * f_max_recip);
    result *= pow(3.3, r);
    return result;
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID) {
    float a = Jonswap(id.x);
    result[id.x * 8 + id.y] = a;
}
